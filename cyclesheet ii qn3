//3.a. 
#include <stdio.h>
#include <stdlib.h>

typedef struct Request {
    int priority;
    char device[10];
    struct Request* next;
} Request;

Request* createRequest(char device[], int priority) {
    Request* newRequest = (Request*)malloc(sizeof(Request));
    newRequest->priority = priority;
    strcpy(newRequest->device, device);
    newRequest->next = NULL;
    return newRequest;
}

void insertRequest(Request** head, char device[], int priority) {
    Request* newRequest = createRequest(device, priority);
    if (*head == NULL || (*head)->priority > priority) {
        newRequest->next = *head;
        *head = newRequest;
        return;
    }
    Request* temp = *head;
    while (temp->next != NULL && temp->next->priority <= priority) {
        temp = temp->next;
    }
    newRequest->next = temp->next;
    temp->next = newRequest;
}

void processRequests(Request** head) {
    while (*head != NULL) {
        printf("Processing %s with priority %d\n", (*head)->device, (*head)->priority);
        Request* temp = *head;
        *head = (*head)->next;
        free(temp);
    }
}

int main() {
    Request* requestList = NULL;

    insertRequest(&requestList, "Keyboard", 1);
    insertRequest(&requestList, "Mouse", 2);
    insertRequest(&requestList, "Scanner", 3);
    insertRequest(&requestList, "Printer", 4);

    processRequests(&requestList);
    return 0;
}

//3.b)
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* push(Node* top, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = top;
    return newNode;
}

void displayStack(Node* top) {
    while (top != NULL) {
        printf("%d ", top->data);
        top = top->next;
    }
    printf("\n");
}

int main() {
    Node* top = NULL;

    top = push(top, 10);
    top = push(top, 20);
    top = push(top, 30);

    displayStack(top);
    return 0;
}

//3.c)
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>

#define MAX 100

typedef struct Stack {
    char data[MAX];
    int top;
} Stack;

void push(Stack* stack, char value) {
    stack->data[++stack->top] = value;
}

char pop(Stack* stack) {
    return stack->data[stack->top--];
}

int precedence(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}

void infixToPostfix(char* infix, char* postfix) {
    Stack stack;
    stack.top = -1;
    int i = 0, j = 0;
    while (infix[i] != '\0') {
        if (isalnum(infix[i])) {
            postfix[j++] = infix[i];
        } else if (infix[i] == '(') {
            push(&stack, infix[i]);
        } else if (infix[i] == ')') {
            while (stack.top != -1 && stack.data[stack.top] != '(') {
                postfix[j++] = pop(&stack);
            }
            pop(&stack);
        } else {
            while (stack.top != -1 && precedence(stack.data[stack.top]) >= precedence(infix[i])) {
                postfix[j++] = pop(&stack);
            }
            push(&stack, infix[i]);
        }
        i++;
    }
    while (stack.top != -1) {
        postfix[j++] = pop(&stack);
    }
    postfix[j] = '\0';
}

int main() {
    char infix[] = "((a+b)^((c/d)*e))";
    char postfix[MAX];
    infixToPostfix(infix, postfix);
    printf("Postfix: %s\n", postfix); // Output: "ab+cd/e*^"
    return 0;
}

//3.d)
#include <stdio.h>

void deposit(double* balance, double amount) {
    *balance += amount;
    printf("Deposited: %.2f, New Balance: %.2f\n", amount, *balance);
}

void withdraw(double* balance, double amount) {
    if (amount > *balance) {
        printf("Insufficient Balance\n");
    } else {
        *balance -= amount;
        printf("Withdrawn: %.2f, New Balance: %.2f\n", amount, *balance);
    }
}

int main() {
    double balance = 1000.0;
    deposit(&balance, 500);
    withdraw(&balance, 200);
    withdraw(&balance, 2000);
    return 0;
}

//3.e)
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* insertAtBeginning(Node* head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = head;
    return newNode;
}

Node* insertAtEnd(Node* head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    if (head == NULL) return newNode;
    Node* temp = head;
    while (temp->next != NULL) temp = temp->next;
    temp->next = newNode;
    return head;
}

void displayList(Node* head) {
    while (head != NULL) {
        printf("%d ", head->data);
        head = head->next;
    }
    printf("\n");
}

int main() {
    Node* head = NULL;

    head = insertAtBeginning(head, 10);
    head = insertAtBeginning(head, 20);

    head = insertAtEnd(head, 30);
    head = insertAtEnd(head, 40);

    displayList(head);
    return 0;
}
